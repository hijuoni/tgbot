import telebot
from telebot.types import Message
import text
import dbtg
import time
from telebot.types import InlineKeyboardButton as IB, CallbackQuery
import fight
import random
import datetime

bot = telebot.TeleBot("7055624841:AAG9OP8Yx1TeMxKLwO1KIxDW59x5rs8D1q0")

temp = {}
clear = telebot.types.ReplyKeyboardRemove()

class Enemy:
    enemy = {
        "–î—Ä–∞–∫–æ–Ω":(100, 20),
        "–õ–æ—Ä–¥":(140, 30),
        "–§–µ–Ω–∏–∫—Å":(80, 30),
        "–ü—Ä–∏–∑—Ä–∞–∫":(60, 40)
    }
    def __init__(self, herolvl):
        self.name = random.choice(list(self.enemy))
        self.hp = (self.enemy[self.name][0]) + (5*(herolvl - 1))
        self.dmg = (self.enemy[self.name][1]) + (5*(herolvl - 1))

@bot.message_handler(["start"])
def start(msg:Message):
    if dbtg.check_player(msg):
        reg1(msg)
        temp[msg.chat.id] = {"name":None}
    else:
        pass

def reg1(msg:Message):
    bot.send_message(msg.chat.id, text.reg %msg.from_user.first_name)
    bot.register_next_step_handler(msg, reg2)

def reg2(msg:Message):
    if not temp[msg.chat.id]["name"]:
        temp[msg.chat.id]["name"] = msg.text
        kb = telebot.types.ReplyKeyboardMarkup(True, True)
        kb.row("–ó–µ–º–ª—è üåç", "–í–æ–¥–∞ üí¶")
        kb.row("–û–≥–æ–Ω—å üî•", "–í–æ–∑–¥—É—Ö üå¨Ô∏è")
        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∏—Ö–∏—é, —é–Ω—ã–π –º–∞–≥.", reply_markup = kb)
        bot.register_next_step_handler(msg, reg3)
    
def reg3(msg:Message):
    if msg.text == "–û–≥–æ–Ω—å üî•":
        temp[msg.chat.id]["name"] = None
        bot.send_message(msg.chat.id, "–Ø –Ω–µ –ø–æ–∑–≤–æ–ª—é –≤—Å—Ç–∞—Ç—å —Ç–µ–±–µ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É –≤—Ä–∞–≥–∞. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é —Å—Ç–∏—Ö–∏—éüò°\n–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(msg, reg2)
        return
    temp[msg.chat.id]["power"] = msg.text
    hp, dmg = fight.powers[msg.text]
    dbtg.users.write([msg.chat.id, temp[msg.chat.id]["name"], msg.text, hp, dmg, 1, 0, False])
    dbtg.heals.write([msg.chat.id, {}])
    print("–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    bot.send_message(msg.chat.id, text.tren)
    time.sleep(2)
    menu(msg)

@bot.message_handler(["menu"])
def menu(msg:Message):
    try:
        print(temp[msg.chat.id])
    except KeyError:
        temp[msg.chat.id] = {}
    bot.send_message(msg.chat.id, text.menu, reply_markup = clear)

@bot.message_handler(["square"])
def square(msg:Message):
    kb = telebot.types.ReplyKeyboardMarkup(True, True)
    kb.row("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    kb.row("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–ª—ã")
    bot.send_message(msg.chat.id, "–¢—ã –Ω–∞ –ø–ª–æ—â–∞–¥–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", reply_markup = kb)
    bot.register_next_step_handler(msg, square_handler)
def square_handler(msg:Message):
    if msg.text == "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è":
        workout(msg)
    elif msg.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–ª—ã":
        exam(msg)

@bot.message_handler(["home"])
def home(msg:Message):
    kb = telebot.types.ReplyKeyboardMarkup(True, True)
    kb.row("–ü–µ—Ä–µ–∫—É—Å–∏—Ç—å")
    kb.row("–û—Ç–¥—ã—Ö–∞—Ç—å")
    bot.send_message(msg.chat.id, "–¢—ã –≤ –ª–∞–≥–µ—Ä–µ", reply_markup = kb)
    bot.register_next_step_handler(msg, home_handler)
def home_handler(msg:Message):
    if msg.text == "–ü–µ—Ä–µ–∫—É—Å–∏—Ç—å":
        eat(msg)
    elif msg.text == "–û—Ç–¥—ã—Ö–∞—Ç—å":
        sleep(msg)

@bot.message_handler(["stats"])
def stats(msg:Message):
    player = dbtg.users.read("user_id", msg.chat.id)
    info = f"{player.power[-1]} {player.name}:\n"\
        f"–ó–¥–æ—Ä–æ–≤—å–µ:{player.hp}‚ù§Ô∏è\n"\
        f"–£—Ä–æ–Ω:{player.damage}‚öîÔ∏è\n"\
        f"–£—Ä–æ–≤–µ–Ω—å:{player.level}, {player.xp}‚öúÔ∏è\n"\
        f"–ï–¥–∞:\n"
    _,food = dbtg.heals.read("user_id", msg.chat.id)
    for i in food:
        info += f"{i} ‚ù§Ô∏è {food[i][1]} - {food[i][0]}—à—Ç.\n"
    bot.send_message(msg.chat.id, info)
    time.sleep(1)
    menu(msg)

@bot.message_handler(["add_heal"])
def add_heal(msg:Message):
    _,food = dbtg.heals.read("user_id", msg.chat.id)
    print(food)
    food["–•–ª–µ–±"] = [20, 15]
    food["–Ø–±–ª–æ–∫–æ"] = [10, 25]
    dbtg.heals.write([msg.chat.id, food])
    bot.send_message(msg.chat.id, "–í–∞–º –≤—ã–¥–∞–ª–∏ –µ–¥—É")

def eat(msg:Message):
    kb = telebot.types.InlineKeyboardMarkup()
    _,food = dbtg.heals.read("user_id", msg.chat.id)
    if food == {}:
        bot.send_message(msg.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –µ–¥—ã", reply_markup = clear)
        menu(msg)
        return
    for i in food:
        kb.row(IB(f"{i} {food[i][1]}‚ù§Ô∏è - {food[i][0]} —à—Ç.", callback_data = f"food_{i}_{food[i][1]}"))
    bot.send_message(msg.chat.id, "–ß—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ—à—å —Å—å–µ—Å—Ç—å?", reply_markup = kb)

@bot.callback_query_handler(func = lambda call:True)
def callback(call:CallbackQuery):
    print(call.data)
    if call.data.startswith("food_"):
        a = call.data.split("_")
        eating(call.message, a[1], a[2])
        kb = telebot.types.InlineKeyboardMarkup()
        _,food = dbtg.heals.read("user_id", call.message.chat.id)
        for i in food:
            kb.row(IB(f"{i} {food[i][1]}‚ù§Ô∏è - {food[i][0]} —à—Ç.", callback_data = f"food_{i}_{food[i][1]}"))
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup = kb)
    if call.data.startswith("sleep_"):
        a = call.data.split("_")
        if a[1] == "0":
            bot.send_message(call.message.chat.id, "–¢—ã —Ä–µ—à–∏–ª –Ω–µ –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å")
            menu(call.message)
        else:    
            t = int(a[1]) // 2
            bot.send_message(call.message.chat.id, f"–¢—ã –ª–µ–≥ –æ—Ç–¥—ã—Ö–∞—Ç—å –Ω–∞ {t} –º–∏–Ω—É—Ç")
            time.sleep(t*2) #–í–º–µ—Å—Ç–æ –¥–≤–æ–π–∫–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —à–µ—Å—Ç—å–¥–µ—Å—è—Ç
            fight.sleeping(call.message, a[1])
            bot.delete_message(call.message.chat.id, call.message.message_id)
            menu(call.message)
    if call.data == "menu":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        menu(call.message)
    if call.data == "workout":
        player = dbtg.users.read("user_id", call.message.chat.id)
        player[4] += player[5] / 10
        player[4] = round(player[4], 2)
        dbtg.users.write(player)
        bot.answer_callback_query(call.id, f"–¢—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è –∏ —Ç–≤–æ—è —Å–∏–ª–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è\n–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞–Ω–æ—Å–∏—à—å {player[4]}‚öîÔ∏è", False)
def eating(msg, fd, hp):
    _,food = dbtg.heals.read("user_id", msg.chat.id)
    player = dbtg.users.read("user_id", msg.chat.id)
    if food[fd][0] == 1:
        del food[fd]
    else:
        food[fd][0] -= 1
    dbtg.heals.write([msg.chat.id, food])
    player[3] += int(hp)
    dbtg.users.write(player)
    print("–ò–≥—Ä–æ–∫ –ø–æ–µ–ª")

def sleep(msg:Message):
    player = dbtg.users.read("user_id", msg.chat.id)
    low = int(fight.powers[player[2]][0] * player[5]) // 2 - player[3]
    high = int(fight.powers[player[2]][0] * player[5]) - player[3]
    kb = telebot.types.InlineKeyboardMarkup()
    if low > 0:
        kb.row(IB(f"–í–∑–¥—Ä–µ–º–Ω—É—Ç—å - +{low}‚ù§Ô∏è", callback_data = f"sleep_{low}"))
    if high > 0:
        kb.row(IB(f"–ü–æ—Å–ø–∞—Ç—å - +{high}‚ù§Ô∏è", callback_data = f"sleep_{high}"))
    if len(kb.keyboard) == 0:
        kb.row(IB("–¢—ã –Ω–µ —Ö–æ—á–µ—à—å —Å–ø–∞—Ç—å", callback_data = "sleep_0"))
    bot.send_message(msg.chat.id, "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—à—å –æ—Ç–¥—ã—Ö–∞—Ç—å?üò¥", reply_markup = kb)

def workout(msg:Message):
    kb = telebot.types.InlineKeyboardMarkup()
    kb.row(IB("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data = "workout"))
    kb.row(IB("–ù–∞–∑–∞–¥", callback_data = "menu"))
    bot.send_message(msg.chat.id, "–ù–∞–∂–∏–º–∞–π —á—Ç–æ–±—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è", reply_markup = kb)

def exam(msg:Message):
    player = dbtg.users.read("user_id", msg.chat.id)
    bot.send_message(msg.chat.id, f"–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –∏—Å–ø—ã—Ç–∞–Ω–∏—é {player[1]}", reply_markup = clear)
    time.sleep(2)
    temp[msg.chat.id]["exams"] = 0
    start_exam(msg)

def start_exam(msg:Message):
    a=random.randint(1,6)
    if a in range(1,4):
        block(msg)
    else:
        attack(msg)

def block(msg:Message):
    ydar = ("–°–ª–µ–≤–∞", "–°–ø—Ä–∞–≤–∞", "–°–≤–µ—Ä—Ö—É", "–°–Ω–∏–∑—É")
    random.shuffle(ydar)
    kb = telebot.types.ReplyKeyboardMarkup(True, False)
    kb.row(ydar[0], ydar[1])
    kb.row(ydar[2], ydar[3])
    ydar2 = random.choice(ydar)
    bot.send_message(msg.chat.id, f"–ó–∞—â–∏—â–∞–π—Å—è –æ—Ç —É–¥–∞—Ä–∞ {ydar2}", reply_markup = kb)
    temp[msg.chat.id]["blockstart"] = datetime.datetime.now().timestamp()
    bot.register_next_step_handler(msg, block_handler, ydar2)

def block_handler(msg:Message, ydar):
    final = datetime.datetime.now().timestamp()
    player = dbtg.users.read("user_id", msg.chat.id)
    if final - temp[msg.chat.id]["blockstart"] > player.damage / 10 or ydar != msg.text:
        bot.send_message(msg.chat.id, "–¢–≤–æ—è —Ä–µ–∞–∫—Ü–∏—é —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è, —Ç—ã –Ω–µ —É—Å–ø–µ–ª –æ—Ç—Ä–∞–∑–∏—Ç—å —É–¥–∞—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞")
        time.sleep(4)
        menu(msg)
        return
    bot.send_message(msg.chat.id, "–¢—ã –æ—Ç—Ä–∞–∑–∏–ª —É–¥–∞—Ä")
    start_exam(msg)

def attack(msg:Message):
    ydar = ("–°–ª–µ–≤–∞", "–°–ø—Ä–∞–≤–∞", "–°–≤–µ—Ä—Ö—É", "–°–Ω–∏–∑—É")
    random.shuffle(ydar)
    kb = telebot.types.ReplyKeyboardMarkup(True, False)
    kb.row(ydar[0], ydar[1])
    kb.row(ydar[2], ydar[3])
    bot.send_message(msg.chat.id, "–í—ã–±–∏—Ä–∞–π –∫—É–¥–∞ –∞—Ç–∞–∫–æ–≤–∞—Ç—å", reply_markup = kb)
    bot.register_next_step_handler(msg, attack_handler)

def attack_handler(msg:Message):
    ydar = ("–°–ª–µ–≤–∞", "–°–ø—Ä–∞–≤–∞", "–°–≤–µ—Ä—Ö—É", "–°–Ω–∏–∑—É")
    choise = random.choice(ydar)
    if choise == msg.text or msg.text not in ydar:
        bot.send_message(msg.chat.id, "–¢–≤–æ—è —Ä–µ–∞–∫—Ü–∏—é —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è, —Ç—ã –Ω–µ —Å–º–æ–≥ –Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É")
        time.sleep(4)
        menu(msg)
        return
    if temp[msg.chat.id]["exam"] < 5:
        temp[msg.chat.id]["exam"] += 1
        bot.send_message(msg.chat.id, "–¢—ã —Å–º–æ–≥ –Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ")
        start_exam(msg)
    else:
        bot.send_message(msg.chat.id, "–¢—ã –ø—Ä–æ—à–µ–ª –∏—Å–ø—ã—Ç–∞–Ω–∏–µ\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞—â–∏—â–∞—Ç—å –≥–æ—Ä–æ–¥")
        player = dbtg.users.read("user_id", msg.chat.id)
        player[7] = True
        dbtg.users.write(player)

def fight1(msg:Message):
    bot.send_message(msg.chat.id, "–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∑–∞–º–∫–∞")
    time.sleep(3)
    bot.send_message(msg.chat.id, "–ö–∞–∂–µ—Ç—Å—è –≤—Ä–∞–≥ —É–∂–µ –±–ª–∏–∑–∫–æ...")
    time.sleep(1)
    newenemy()

def newenemy(msg:Message):
    readble = dbtg.users.read("name_id", msg.chat.id)
    enemy = Enemy(readble[5])
    kb = telebot.types.ReplyKeyboardMarkup(True, True)
    kb.row("–°—Ä–∞–∑–∏—Ç—å—Å—è")
    kb.row("–°–±–µ–∂–∞—Ç—å")
    kb.row("–£–π—Ç–∏ –≤ –≥–æ—Ä–æ–¥")
    text = f"–¢—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª –≤—Ä–∞–≥–∞:{enemy.name}, hp={enemy.hp}, dmg={enemy.dmg}"
    bot.send_message(msg.chat.id, text, reply_markup = kb)
    bot.register_next_step_handler(msg, fight_handler, enemy)

def fight_handler(msg:Message, enemy:Enemy):
    if msg.text == "–°—Ä–∞–∑–∏—Ç—å—Å—è":
        srazenie(msg, enemy)
    elif msg.text == "–°–±–µ–∂–∞—Ç—å":
        rand = random.randint(1,5)
        if rand in range(1,4):
            bot.send_message(msg.chat.id, "–í—ã —Å–±–µ–∂–∞–ª–∏")
            time.sleep(2)
            newenemy(msg)
        else:
            bot.send_message(msg.chat.id, "–£ –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å")
            srazenie(msg, enemy)
    elif msg.text == "–£–π—Ç–∏ –≤ –≥–æ—Ä–æ–¥":
        time.sleep(1)
        bot.send_message(msg.chat.id, "–¢—ã –≤—ã–¥–≤–∏–Ω—É–ª—Å—è –≤ –≥–æ—Ä–æ–¥")
        time.sleep(3)
        menu(msg)

def srazenie(msg:Message, enemy:Enemy):
    ydar = player_attack(msg, enemy)
    if ydar is True:
        ydar = enemy_attack(msg, enemy) 
        if ydar is True:
            srazenie(msg, enemy)
    else:
        player = dbtg.users.read("name_id", msg.chat.id)
        time.sleep(2)
        xp = random.randint(25, 40)
        bot.send_message(msg.chat.id, f"–ó–∞ —ç—Ç–æ—Ç –±–æ–π —Ç—ã –ø–æ–ª—É—á–∏–ª {xp} –æ–ø—ã—Ç–∞")
        player[6] += xp
        dbtg.users.write(player)
        opit(msg)
        bot.send_message(msg.chat.id, "–¢—ã –≤ –ø–æ–∏—Å–∫–∞—Ö –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...")
        time.sleep(2)
        newenemy(msg)
        return
    
def player_attack(msg:Message, enemy:Enemy):
    time.sleep(3)
    player = dbtg.users.read("name_id", msg.chat.id)
    enemy.hp -+ player[4]
    if enemy.hp <= 0:
        bot.send_message(msg.chat.id, "–¢—ã –ø–æ–±–µ–¥–∏–ª –≤—Ä–∞–≥–∞")
        return False
    else:
        bot.send_message(msg.chat.id, f"{enemy.name}, xp {round(enemy.hp,1)}")
        return True
    
def enemy_attack(msg:Message, enemy:Enemy):
    time.sleep(3)
    player = dbtg.users.read("name_id", msg.chat.id)
    player[3] -= enemy.dmg
    dbtg.users.write(player)
    if player[3] <= 0:
        player[3] = 1
        dbtg.users.write(player)
        bot.send_message(msg.chat.id, "–¢—ã –ø–æ–ª—É—á–∏–ª —Å–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä, –Ω–æ —Ç–µ–±—è –∑–∞–º–µ—Ç–∏–ª –ª–µ—Å–Ω–∏–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –ª–∞–≥–µ—Ä—å. –¢–µ–±–µ –ø–æ–≤–µ–∑–ª–æ –Ω–æ–≤–∏—á–æ–∫...")
        time.sleep(3)
        menu(msg)
        return
    else:
        bot.send_message(msg.chat.id, f"{player[1]}, xp {round(player[3],1)}")
        return True
    
def opit(msg:Message):
    player = dbtg.users.read("name_id", msg.chat.id)
    if player[6] >= 100 + ((player[5] - 1) * 50):
        player[6] -= 100 + ((player[5] - 1) * 50) 
        player[3] = fight.powers[player[2]][0] + ((player[5] - 1) * 15)
        player[5] += 1
        player[4] += 5
        player[3] += 15
        dbtg.users.write(player)
        t = f"–°—Ç–∏—Ö–∏—è: {player[2]}\n–ù–∏–∫–Ω–µ–π–º: {player[1]}\n" \
            f"–ó–¥–æ—Ä–æ–≤—å–µ: {player[3]}‚ù§Ô∏è\n" \
            f"–£—Ä–æ–Ω: {player[4]}‚öîÔ∏è\n" \
            f"–£—Ä–æ–≤–µ–Ω—å: {player[5]}\n–û–ø—ã—Ç: {player[6]}‚öúÔ∏è"
        bot.send_message(msg.chat.id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤ –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è, –≤–æ—Ç —Ç–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ \n" + t)
        time.sleep(2)
        return
    return

bot.infinity_polling()